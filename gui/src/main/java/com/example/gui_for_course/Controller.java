package com.example.gui_for_course;

import java.io.*;
import java.net.URL;
import java.util.*;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;




public class Controller {

    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private Button buttonDirectoryChoose;

    @FXML
    private Button buttonFileChoose;

    @FXML
    private Button buttonStart;

    @FXML
    private TextArea codeCpp;

    @FXML
    private TextField pathChoosenDirectoryForSave;

    @FXML
    private TextField pathChoosenFile;

    @FXML
    private CheckBox bufferOverflow;

    @FXML
    private CheckBox formatString;

    @FXML
    private CheckBox incorrectFile;

    @FXML
    private CheckBox informationLeak;

    @FXML
    private CheckBox injectionCommands;

    @FXML
    private CheckBox injectionSQL;

    @FXML
    private CheckBox integerOverflow;

    @FXML
    private CheckBox neglectErrorHandling;

    @FXML
    private CheckBox negletSecureData;

    @FXML
    private CheckBox racing;

    @FXML
    private CheckBox randomCryptograph;

    @FXML
    private CheckBox readersWriters;

    public Controller() {
    }

    @FXML
    void initialize() {

    }

    List<String> list = new ArrayList<>();
    public List<String> getList() {
        return list;
    }

    @FXML
    private void boxBufferOverflow() {
        if (bufferOverflow.isSelected()){
            list.add("bufferOverflow");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("bufferOverflow"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxReadersWriters() {
        if (readersWriters.isSelected()){
            list.add("readersWriters");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("readersWriters"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxRandomCryptographicNumbers() {
        if (randomCryptograph.isSelected()){
            list.add("randomCryptographicNumbers");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("randomCryptographicNumbers"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxRacing() {
        if (racing.isSelected()){
            list.add("racing");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("racing"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxNeglectSecureDataStorage() {
        if (negletSecureData.isSelected()){
            list.add("neglectSecureDataStorage");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("neglectSecureDataStorage"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxNeglectErrorHandling() {
        if (neglectErrorHandling.isSelected()){
            list.add("neglectErrorHandling");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("neglectErrorHandling"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxIntegerOverflow() {
        if (integerOverflow.isSelected()){
            list.add("integerOverflow");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("integerOverflow"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxInjectionSQLCommands() {
        if (injectionSQL.isSelected()){
            list.add("injectionSQLCommands");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("injectionSQLCommands"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxInjectionCommands() {
        if (injectionCommands.isSelected()){
            list.add("injectionCommands");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("injectionCommands"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxInformationLeak() {
        if (informationLeak.isSelected()){
            list.add("informationLeak");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("informationLeak"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxIncorrectFileAccess() {
        if (incorrectFile.isSelected()){
            list.add("incorrectFileAccess");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("incorrectFileAccess"));
            System.out.println(list);
        }
    }

    @FXML
    private void boxFormatStringError() {
        if (formatString.isSelected()){
            list.add("formatStringError");
            System.out.println(list);
        } else {
            list.removeIf(list -> list.equals("formatStringError"));
            System.out.println(list);
        }
    }

    private void printLog(TextField textField, List<File> files) {
        if (files == null || files.isEmpty()) {
            return;
        }
        for (File file : files) {
            textField.appendText(file.getAbsolutePath() + "\n");
        }
    }

    private String filePath;
    public String getFilePath() {
        return filePath;
    }
    public void fileChoosen(ActionEvent actionEvent) throws IOException {
        FileChooser fileChooser = new FileChooser();
        Stage primaryStage = new Stage();
        pathChoosenFile.clear();
        fileChooser.setInitialDirectory(new File("C:\\"));
        fileChooser.setTitle("Select cpp file: ");
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(".cpp", "*.cpp"));
        File file = fileChooser.showOpenDialog(primaryStage);
        if (file != null) {
            List<File> files = List.of(file);
            printLog(pathChoosenFile, files);
            filePath = file.getAbsolutePath();
        }
        System.out.println(filePath);
        printToCodeCpp();
    }

    private void printToCodeCpp() throws IOException {
        codeCpp.clear();
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String line = null;
        while ((line = br.readLine()) != null) {
            codeCpp.appendText(line + '\n');
        }
    }

    private String directoryPath;
    public String getDirectoryPath() {
        return directoryPath;
    }
    public void directoryChoosen(ActionEvent actionEvent) {
        DirectoryChooser directoryChooser = new DirectoryChooser();
        Stage primaryStage = new Stage();
        pathChoosenDirectoryForSave.clear();
        directoryChooser.setInitialDirectory(new File("C:\\"));
        directoryChooser.setTitle("Select directory for save: ");
        File file = directoryChooser.showDialog(primaryStage);
        if (file != null) {
            List<File> files = List.of(file);
            printLog(pathChoosenDirectoryForSave, files);
            directoryPath = file.getAbsolutePath();
        }
        System.out.println(directoryPath);
    }

    public void startAnalyzer(ActionEvent actionEvent) {

    }

}
