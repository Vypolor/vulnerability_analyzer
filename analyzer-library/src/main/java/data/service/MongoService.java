package data.service;

import com.mongodb.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.MongoClientURI;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import data.entity.VulnerabilityEntity;
import org.bson.codecs.configuration.CodecRegistries;
import org.bson.codecs.pojo.PojoCodecProvider;
import vulnerabilities.Vulnerability;
import vulnerabilities.rule.Rule;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class MongoService {

    private static final String MONGO_URI = "mongodb+srv://root:admin@cluster0.h6ker.mongodb.net/test";
    private static final String DB_NAME = "root";
    private static final String COLLECTION_NAME = "vulnerability";

    private final MongoCollection<VulnerabilityEntity> mongoCollection = getMongoCollection();

    private MongoCollection<VulnerabilityEntity> getMongoCollection() {
        MongoClient client = new MongoClient(new MongoClientURI(MONGO_URI));
        MongoDatabase database = client.getDatabase(DB_NAME);

        return database.withCodecRegistry(CodecRegistries.fromRegistries(
                MongoClientSettings.getDefaultCodecRegistry(),
                CodecRegistries.fromProviders(PojoCodecProvider.builder().automatic(true).build())
        )).getCollection(COLLECTION_NAME, VulnerabilityEntity.class);
    }

    public List<Rule> getRulesByVulnerability(String vulnerabilityName) {
        VulnerabilityEntity entity = mongoCollection.find(Filters.eq("vulnerabilityName", vulnerabilityName)).first();
        if (entity != null)
            return entity.getRules();
        return Collections.emptyList();
    }

    public void addVulnerabilityEntity(VulnerabilityEntity entity) {

        mongoCollection.insertOne(entity);
    }
}
