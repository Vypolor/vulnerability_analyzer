package report;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.runtime.RuntimeConstants;
import org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Map;

public class VelocityHelper {

    private static final Logger log = LogManager.getLogger(VelocityHelper.class);

    public static void saveReportToFile(String pathToTemplateFile, String pathToReportFile
            , Map<String, Object> parameters) {
        Template template = loadVelocityTemplate(pathToTemplateFile);
        VelocityContext context = createVelocityContext(parameters);

        File reportFile = new File(pathToReportFile);
        Writer writer = null;
        try {
            writer = new OutputStreamWriter(new FileOutputStream(pathToReportFile), StandardCharsets.UTF_8);
            template.merge(context, writer);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    log.warn(e);
                }
            }
        }

    }

    private static Template loadVelocityTemplate(String pathToTemplateFile) {
        VelocityEngine velocityEngine = new VelocityEngine();
        velocityEngine.setProperty(RuntimeConstants.RESOURCE_LOADER, "classpath");
        velocityEngine.setProperty("classpath.resource.loader.class", ClasspathResourceLoader.class.getName());
        velocityEngine.setProperty("runtime.log.system.class", "org.apache.velocity.runtime.log.NullLogChute");
        velocityEngine.init();

        return velocityEngine.getTemplate(pathToTemplateFile);
    }

    private static VelocityContext createVelocityContext(Map<String, Object> parameters) {
        VelocityContext context = new VelocityContext();
        for (Map.Entry<String, Object> parameter : parameters.entrySet()) {
            context.put(parameter.getKey(), parameter.getValue());
        }
        return context;
    }
}
