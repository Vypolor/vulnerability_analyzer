import java.io.File;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import report.ReportCreator;
import report.ReportInformation;
import utils.Constants;
import utils.FileHelper;
import vulnerabilities.Vulnerability;
import vulnerabilities.VulnerabilityFactory;

public class VulnerabilityAnalyzerLauncher {

    private final List<String> activeVulnerability;
    private final String pathToSourceFile;
    private final String pathToReportFolder;

    public VulnerabilityAnalyzerLauncher(List<String> activeAbstractVulnerability
            , String pathToSourceFile, String pathToReportFolder) {
        this.activeVulnerability = activeAbstractVulnerability;
        this.pathToSourceFile = pathToSourceFile;
        this.pathToReportFolder = pathToReportFolder;
    }

    public void execute() {
        File file = new File(pathToSourceFile);
        if (file.isFile()) {
            launchAnalysis(pathToSourceFile, pathToReportFolder);
        } else if (file.isDirectory()) {
            List<String> fileList = FileHelper.readCppFilesFromDirectory(pathToSourceFile);
            for (String curFile : fileList) {
                String reportPath = calculateReportPath(curFile);
                launchAnalysis(curFile, reportPath);
            }
        }
    }

    private void launchAnalysis(String pathToFile, String filePathToReportFolder) {
        List<String> sourceCode = FileHelper.readDataFromCppFile(pathToFile);
        VulnerabilityFactory factory = new VulnerabilityFactory();
        List<ReportInformation> reportInformation = new ArrayList<>();
        for (String vulnerabilityName : activeVulnerability) {
            Vulnerability vulnerability = factory.getVulnerabilityInstance(vulnerabilityName);
            List<ReportInformation> curVulnerabilityReportInformation = vulnerability.checkRules(sourceCode);
            if (curVulnerabilityReportInformation.size() != 0) {
                reportInformation.addAll(curVulnerabilityReportInformation);
            }
        }
        File file = new File(pathToFile);
        String fileName = file.getName().replace(".cpp", Constants.EMPTY_STRING);
        reportInformation.sort(Comparator.comparingInt(ReportInformation::getLineNumber));
        FileHelper.createDirs(filePathToReportFolder, pathToReportFolder);
        ReportCreator.createHtmlReport(pathToSourceFile, filePathToReportFolder, reportInformation, fileName);
    }

    private String calculateReportPath(String curFile) {
        File file = new File(curFile);
        String pathDifference = curFile.replace(pathToSourceFile, Constants.EMPTY_STRING);
        String resultPath = (pathToReportFolder + pathDifference).replace(file.getName(), Constants.EMPTY_STRING);
        return resultPath.substring(0, resultPath.length() - 1);
    }

    public static void main(String[] args) {
//        Vulnerability vulnerability = new BufferOverflowVulnerability();
        List<String> list = new ArrayList<>();
        list.add("randomCryptographicNumbers");
        VulnerabilityAnalyzerLauncher launcher = new VulnerabilityAnalyzerLauncher(list
                , "C:\\Users\\nifr0821\\Desktop\\testFolder"
                , "C:\\Users\\nifr0821\\Desktop\\report");
        launcher.execute();
    }
}
