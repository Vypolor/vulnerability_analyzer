import utils.FileHelper;
import vulnerabilities.Vulnerability;
import vulnerabilities.VulnerabilityFactory;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityAnalyzerLauncher {

    private final List<String> activeVulnerability;
    private final String pathToSourceFile;
    private final String pathToReportFolder;

    public VulnerabilityAnalyzerLauncher(List<String> activeAbstractVulnerability
            , String pathToSourceFile, String pathToReportFolder) {
        this.activeVulnerability = activeAbstractVulnerability;
        this.pathToSourceFile = pathToSourceFile;
        this.pathToReportFolder = pathToReportFolder;
    }

    public void launchAnalysis() {
        try {
            List<String> sourceCode = FileHelper.readDataFromCppFile(pathToSourceFile);
            VulnerabilityFactory factory = new VulnerabilityFactory();
            for(String vulnerabilityName : activeVulnerability) {
                Vulnerability vulnerability = factory.getVulnerabilityInstance(vulnerabilityName);
                vulnerability.checkRules(sourceCode);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("bufferOverflow");
        VulnerabilityAnalyzerLauncher launcher = new VulnerabilityAnalyzerLauncher(list
                , "C:\\Users\\frolo\\IdeaProjects\\testest\\vulnerability_analyzer\\analyzer-library\\src\\main\\resources\\test.cpp"
                , "tempPath");
        launcher.launchAnalysis();
    }
}
