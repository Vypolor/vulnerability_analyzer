package utils;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class FileHelper {

    private FileHelper() {
        //Empty
    }

    public static List<String> readDataFromCppFile(String pathToFile) {
        if (validateInputFile(pathToFile)) {
            try {
                return Files.lines(Path.of(pathToFile), StandardCharsets.ISO_8859_1)
                        .collect(Collectors.toCollection(ArrayList::new));
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            throw new IllegalArgumentException("Invalid file path or extension\nExpected extension .cpp");
        }
        return null;
    }

    public static List<String> readCppFilesFromDirectory(String pathToFolder) {
        List<String> files = new ArrayList<>();
        findFiles(pathToFolder, files);
        return files;
    }

    public static void findFiles(String baseDirName, List<String> resultFileList) {
        File baseDirectory = new File(baseDirName);
        if (!baseDirectory.exists() || !baseDirectory.isDirectory()) {
            System.out.println("Error find file: " + baseDirectory);
        } else {
            String[] fileList = baseDirectory.list();
            for (String s : fileList) {
                File readFile = new File(baseDirectory + "\\" + s);
                if (!readFile.isDirectory()) {
                    if (readFile.getAbsolutePath().contains(".cpp")) {
                        resultFileList.add(readFile.getAbsolutePath());
                    }
                } else if (readFile.isDirectory()) {
                    findFiles(readFile.getAbsolutePath(), resultFileList);
                }
            }
        }
    }

    public static void createDirs(String reportFolder, String fileReportPath) {
        String diff = reportFolder.replace(fileReportPath, Constants.EMPTY_STRING);
        String[] dirs = diff.split("\\\\");
        String path = fileReportPath;
        for (int i = 1; i < dirs.length; ++i) {
            path += "\\" + dirs[i];
            File file = new File(path);
            if (!file.exists()) {
                file.mkdir();
            }
        }
    }

    private static boolean validateInputFile(String pathToFile) {
        File file = new File(pathToFile);
        return file.isFile() && file.exists() && file.getName().contains(".cpp");
    }

    public static void recursiveDelete(File file) {
        if (!file.exists())
            return;
        if (file.isDirectory()) {
            for (File f : file.listFiles()) {
                recursiveDelete(f);
            }
        }
        file.delete();
    }
}
