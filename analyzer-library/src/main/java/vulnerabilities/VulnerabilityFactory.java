package vulnerabilities;

import vulnerabilities.impl.*;

public class VulnerabilityFactory {

    public Vulnerability getVulnerabilityInstance(String vulnerabilityName) {
        switch (vulnerabilityName) {
            case "bufferOverflow":
                return new BufferOverflowVulnerability();
            case "formatStringError":
                return new FormatStringErrorVulnerability();
            case "incorrectFileAccess":
                return new IncorrectFileAccessVulnerability();
            case "informationLeak":
                return new InformationLeakVulnerability();
            case "injectionCommands":
                return new InjectionCommandsVulnerability();
            case "injectionSQLCommands":
                return new InjectionSQLCommandsVulnerability();
            case "integerOverflow":
                return new IntegerOverflowVulnerability();
            case "neglectErrorHandling":
                return new NeglectErrorHandlingVulnerability();
            case "neglectSecureDataStorage":
                return new NeglectSecureDataStorageVulnerability();
            case "racing":
                return new RacingVulnerability();
            case "randomCryptographicNumbers":
                return new RandomCryptographicNumbersVulnerability();
            case "readersWriters":
                return new ReadersWritersVulnerability();
            default:
                throw new IllegalArgumentException("temp");
        }
    }
}
