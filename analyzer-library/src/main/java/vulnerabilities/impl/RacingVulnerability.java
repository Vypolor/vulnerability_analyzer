package vulnerabilities.impl;

import report.ReportInformation;
import utils.Constants;
import vulnerabilities.Vulnerability;
import vulnerabilities.rule.Rule;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RacingVulnerability extends Vulnerability
{

    private final List<Rule> validationRules;

    public RacingVulnerability()
    {
        validationRules = initializeRules(this);
    }

    public List<Rule> getValidationRules()
    {
        return validationRules;
    }

    //https://undo.io/resources/debugging-race-conditions-cpp/
    //https://github.com/portfoliocourses/c-example-code/blob/main/race_condition_example/main.c
    //https://www.youtube.com/watch?v=K1aoimUYTK8
    @Override
    public List<ReportInformation> checkRules(List<String> sourceCode)
    {
        List<ReportInformation> result = new ArrayList<>();
        for (Rule curRule : validationRules)
        {
            Pattern pattern = Pattern.compile(curRule.getMask());
            Matcher matcher;
            int codeStringNumber = 0;
            for (String curCodeString : sourceCode)
            {
                ++codeStringNumber;
                String curStringWithoutTab = curCodeString.replace("\t", "");
                matcher = pattern.matcher(curStringWithoutTab);
                if (matcher.find())
                {
                    String resource = curStringWithoutTab.replace("pthread_create(", "").replace(");"
                            , "").split(",")[2];
                    if (checkResource(codeStringNumber, sourceCode, resource))
                    {
                        ReportInformation reportInformation = new ReportInformation(
                                codeStringNumber + ": " + curStringWithoutTab
                                , Constants.RACING_CONDITION
                                , curRule
                                , codeStringNumber);
                        result.add(reportInformation);
                    }
                }
            }
        }
        return result;
    }

    private boolean checkResource(int stringNumber, List<String> sourceCode, String resource)
    {
        Pattern commonResourcePattern = Pattern.compile(resource);
        Matcher commonResourceMatcher;
        for (String curCodeString : sourceCode)
        {
            if (curCodeString.equals(sourceCode.get(stringNumber)))
            {
                continue;
            }
            commonResourceMatcher = commonResourcePattern.matcher(curCodeString);
            if (commonResourceMatcher.find())
            {
                return true;
            }
        }
        return false;
    }
}
