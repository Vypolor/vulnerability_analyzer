package vulnerabilities.impl;

import report.ReportInformation;
import utils.Constants;
import vulnerabilities.Vulnerability;
import vulnerabilities.rule.Rule;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

//Gafar
public class RandomCryptographicNumbersVulnerability extends Vulnerability {

    private final List<Rule> validationRules;

    public RandomCryptographicNumbersVulnerability() {
        validationRules = initializeRules(this);
    }

    public List<Rule> getValidationRules() {
        return validationRules;
    }

    @Override
    public List<ReportInformation> checkRules(List<String> sourceCode) {
        List<ReportInformation> result = new ArrayList<>();
        for (Rule curRule : validationRules) {
            Pattern pattern = Pattern.compile(curRule.getMask());
            Matcher matcher;
            int codeStringNumber = 0;
            for (String curCodeString : sourceCode) {
                ++codeStringNumber;
                String curStringWithoutTab = curCodeString.replace("\t", "");
                matcher = pattern.matcher(curStringWithoutTab);
                if (matcher.find()) {
                    ReportInformation reportInformation = new ReportInformation(
                            codeStringNumber + ": " + curStringWithoutTab
                            , Constants.RANDOM_CRYPTO_NUMBERS
                            , curRule
                            , codeStringNumber);
                    result.add(reportInformation);
                }
            }
        }
        return result;
    }

    public void createRules() {
        Rule seedRule = new Rule("Seed using", ".*(\\.seed){1}.*(time){1}.*"
                , "Possible incompatibility of operating systems"
                , "Better use std::random_device as seed");
    }
//        std::mt19937 engine; // mt19937 как один из вариантов
//        engine.seed(std::time(nullptr));
//        /*
//        на случай, если у вас UNIX-чё-то или компилятор не MinGW
//        std::random_device device;
//        engine.seed(device());
}
