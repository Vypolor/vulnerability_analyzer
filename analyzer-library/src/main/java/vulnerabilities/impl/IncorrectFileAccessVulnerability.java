package vulnerabilities.impl;

import report.ReportInformation;
import utils.Constants;
import vulnerabilities.Vulnerability;
import vulnerabilities.rule.Rule;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

//Gafar
public class IncorrectFileAccessVulnerability extends Vulnerability {

    private final List<Rule> validationRules;

    public IncorrectFileAccessVulnerability() {
        validationRules = initializeRules(this);
    }

    public List<Rule> getValidationRules() {
        return validationRules;
    }

    @Override
    public List<ReportInformation> checkRules(List<String> sourceCode) {
        String realPathRegex = "(\\W)realpath\\(";
        String openRegex = "(\\W)open\\(";
        List<ReportInformation> result = new ArrayList<>();
        for (Rule curRule : validationRules) {
            Pattern pattern = Pattern.compile(curRule.getMask());
            Matcher matcher;
            int codeStringNumber = 0;
            if (curRule.getRuleName().equals("Create or open file")) {
                for (String curCodeString : sourceCode) {
                    ++codeStringNumber;
                    String curStringWithoutTab = curCodeString.replace("\t", "");
                    matcher = pattern.matcher(curStringWithoutTab);
                    if (matcher.find()) {
                        // Create or Open file method founded
                        // Let's search realpath() method
                        boolean realPathMethodFounded = false;
                        Pattern patternRealPath = Pattern.compile(realPathRegex);
                        Matcher matcherRealPath;
                        for (String codeStringForFindRealPath : sourceCode) {
                            String codeStringForFindRealPathWithoutTab = codeStringForFindRealPath.replace("\t", "");
                            matcherRealPath = patternRealPath.matcher(codeStringForFindRealPathWithoutTab);
                            if (matcherRealPath.find()) {
                                // realpath() founded
                                realPathMethodFounded = true;
                                break;
                            }
                        }
                        // if realpath() method not founded -> it's VULNERABILITY
                        if (!realPathMethodFounded) {
                            ReportInformation reportInformation = new ReportInformation(
                                    codeStringNumber + ": " + curStringWithoutTab
                                    , Constants.INCORRECT_FILE_ACCESS
                                    , curRule
                                    , codeStringNumber);
                            result.add(reportInformation);
                        }
                    }
                }
            }
            else if (curRule.getRuleName().equals("Access + Open file")) {
                for (String curCodeString : sourceCode) {
                    ++codeStringNumber;
                    String curStringWithoutTab = curCodeString.replace("\t", "");
                    matcher = pattern.matcher(curStringWithoutTab);
                    if (matcher.find()) {
                        // access() file method founded
                        // Let's search open() method
                        boolean openMethodFounded = false;
                        Pattern patternOpenMethod = Pattern.compile(openRegex);
                        Matcher matcherOpenMethod;
                        for (String codeStringForFindOpenMethod : sourceCode) {
                            String codeStringForFindOpenMethodWithoutTab = codeStringForFindOpenMethod.replace("\t", "");
                            matcherOpenMethod = patternOpenMethod.matcher(codeStringForFindOpenMethodWithoutTab);
                            if (matcherOpenMethod.find()) {
                                // open() founded
                                openMethodFounded = true;
                                break;
                            }
                        }
                        // if open() method founded -> it's VULNERABILITY
                        if (openMethodFounded) {
                            ReportInformation reportInformation = new ReportInformation(
                                    codeStringNumber + ": " + curStringWithoutTab
                                    , Constants.INCORRECT_FILE_ACCESS
                                    , curRule
                                    , codeStringNumber);
                            result.add(reportInformation);
                        }
                    }
                }
            }
            else {
                for (String curCodeString : sourceCode) {
                    ++codeStringNumber;
                    String curStringWithoutTab = curCodeString.replace("\t", "");
                    matcher = pattern.matcher(curStringWithoutTab);
                    if (matcher.find()) {
                        ReportInformation reportInformation = new ReportInformation(
                                codeStringNumber + ": " + curStringWithoutTab
                                , Constants.INCORRECT_FILE_ACCESS
                                , curRule
                                , codeStringNumber);
                        result.add(reportInformation);
                    }
                }
            }
        }
        return result;
    }

    public void createRules() {
        List<Rule> rules = Arrays.asList(
                new Rule("Create or open file"
                        , "(\\W)(CreateFile|OpenFile)\\("
                        , "Create or open file without checking file path via realpath() function"
                        , "Better use char* realpath(const char *original_path, char resolved_path[PATH_MAX]) for check suspicious path to file"),
                new Rule("Access + Open file"
                        , "(\\W)access\\("
                        , "Access and Open file methods in one thread"
                        , "Make sure you have one thread while opening a file like this!")
        );
    }
}
