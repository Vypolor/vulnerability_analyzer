package vulnerabilities.impl;

import vulnerabilities.Vulnerability;
import vulnerabilities.rule.Rule;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BufferOverflowVulnerability implements Vulnerability {

    private List<Rule> validationRules;

    public BufferOverflowVulnerability() {
        //Empty
        validationRules = initializeRules();
    }

    public BufferOverflowVulnerability(List<Rule> validationRules) {
        this.validationRules = validationRules;
    }

    public List<Rule> getValidationRules() {
        return validationRules;
    }

    public void setValidationRules(List<Rule> validationRules) {
        this.validationRules = validationRules;
    }

    @Override
    public void checkRules(List<String> sourceCode) {
        int error = 0;
        for(Rule curRule : validationRules) {
            Pattern pattern = Pattern.compile(curRule.getMask());
            Matcher matcher;
            for(String curCodeString : sourceCode) {
                matcher = pattern.matcher(curCodeString);
                if (matcher.find()) {
                    ++error;
                }
            }
        }
    }

    private List<Rule> initializeRules() {
        List<Rule> result = new ArrayList<>();
        Rule strcpyRule = new Rule("Using strcpy function", "strcpy"
                , "Unsafe fuction strcpy", "Better use strncpy");
        result.add(strcpyRule);
        return result;
    }
}
