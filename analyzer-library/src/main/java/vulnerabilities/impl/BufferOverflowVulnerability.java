package vulnerabilities.impl;

import report.ReportInformation;
import utils.Constants;
import vulnerabilities.Vulnerability;
import vulnerabilities.rule.Rule;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BufferOverflowVulnerability extends Vulnerability {

    private final List<Rule> validationRules;

    public BufferOverflowVulnerability() {
        validationRules = initializeRules(this);
    }

    public BufferOverflowVulnerability(List<Rule> validationRules) {
        this.validationRules = validationRules;
    }

    public List<Rule> getValidationRules() {
        return validationRules;
    }

    @Override
    public List<ReportInformation> checkRules(List<String> sourceCode) {
        List<ReportInformation> result = new ArrayList<>();
        for (Rule curRule : validationRules) {
            Pattern pattern = Pattern.compile(curRule.getMask());
            Matcher matcher;
            int codeStringNumber = 0;
            for (String curCodeString : sourceCode) {
                ++codeStringNumber;
                String curStringWithoutTab = curCodeString.replace("\t", "");
                matcher = pattern.matcher(curStringWithoutTab);
                if (matcher.find()) {
                    ReportInformation reportInformation = new ReportInformation(
                            codeStringNumber + ": " + curStringWithoutTab
                            , Constants.BUFFER_OVERFLOW
                            , curRule);
                    result.add(reportInformation);
                }
            }
        }
        return result;
    }

//    private List<Rule> initializeRules() {
//        List<Rule> result = new ArrayList<>();
//        Rule strcpyRule = new Rule("Using strcpy function", "strcpy"
//                , "Unsafe fuction strcpy", "Better use strncpy");
//        Rule strcatRule = new Rule("Using strcat function", "strcat"
//                , "Unsafe function strcat", "Better use strncat");
//        Rule gets = new Rule("Unsafe function gets", "gets"
//                , "Unsafe function gets", "Better use fgets");
//        result.add(strcpyRule);
//        result.add(strcatRule);
//        result.add(gets);
//        return result;
//    }
}
