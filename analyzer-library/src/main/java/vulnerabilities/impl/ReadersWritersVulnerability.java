package vulnerabilities.impl;

import report.ReportInformation;
import utils.Constants;
import vulnerabilities.Vulnerability;
import vulnerabilities.rule.Rule;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ReadersWritersVulnerability extends Vulnerability {

    private static final String OMP_LOCK_T_PATTERN = "omp_lock_t";

    private final List<Rule> validationRules;

    public ReadersWritersVulnerability() {
        validationRules = initializeRules(this);
    }

    public List<Rule> getValidationRules() {
        return validationRules;
    }

    @Override
    public List<ReportInformation> checkRules(List<String> sourceCode) {
        List<ReportInformation> result = new ArrayList<>();
        for (Rule curRule : validationRules) {
            Pattern pattern = Pattern.compile(curRule.getMask());
            Matcher matcher;
            int codeStringNumber = 0;
            for (String curCodeString : sourceCode) {
                ++codeStringNumber;
                String curStringWithoutTab = curCodeString.replace("\t", "");
                matcher = pattern.matcher(curStringWithoutTab);
                if (matcher.find()) {
                    if (!ompLockFinder(sourceCode)) {
                        ReportInformation reportInformation = new ReportInformation(
                                codeStringNumber + ": " + curStringWithoutTab
                                , Constants.READERS_WRITERS
                                , curRule
                                , codeStringNumber);
                        result.add(reportInformation);
                    }
                }
            }
        }
        return result;
    }

    private boolean ompLockFinder(List<String> sourceCode) {
        for (String curCodeString : sourceCode) {
            Pattern  ompLockPattern = Pattern.compile(OMP_LOCK_T_PATTERN);
            Matcher ompMatcher = ompLockPattern.matcher(curCodeString);
            if (ompMatcher.find()) {
                return true;
            }
        }
        return false;
    }
}
