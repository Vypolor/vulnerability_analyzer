package vulnerabilities.impl;

import report.ReportInformation;
import utils.Constants;
import vulnerabilities.Vulnerability;
import vulnerabilities.rule.Rule;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FormatStringErrorVulnerability extends Vulnerability {

    private final List<Rule> validationRules;

    public FormatStringErrorVulnerability() {
        validationRules = initializeRules(this);
    }

    public List<Rule> getValidationRules() {
        return validationRules;
    }

    @Override
    public List<ReportInformation> checkRules(List<String> sourceCode) {
        List<ReportInformation> result = new ArrayList<>();
        for (Rule curRule : validationRules) {
            Pattern pattern = Pattern.compile(curRule.getMask());
            Matcher matcher;
            int codeStringNumber = 0;
            for (String curCodeString : sourceCode) {
                ++codeStringNumber;
                String curStringWithoutTab = curCodeString.replace("\t", "");
                matcher = pattern.matcher(curStringWithoutTab);
                if (matcher.find()) {
                    ReportInformation reportInformation = new ReportInformation(
                            codeStringNumber + ": " + curStringWithoutTab
                            , Constants.FORMAT_STRING_ERROR
                            , curRule
                            , codeStringNumber);
                    result.add(reportInformation);
                }
            }
        }
        return result;
    }
    /*
    List<Rule> formatStringError = Arrays.asList(
                new Rule("Using an unsafe function", "printf", "Format string vulnerability. Unsafe function call"
                        , "Better use std::cout << \"your string\""),
                new Rule("Unsafe call syslog", "syslog\\([a-zA-Z_0-9]+,\s?[a-zA-Z0-9_]+\\);", "Unsafe call syslog"
                        , "Use 'syslog' with void syslog( int priority, char *format, ...)")
        );
     */
}
