package vulnerabilities.impl;

import data.entity.VulnerabilityEntity;
import data.service.MongoService;
import report.ReportInformation;
import utils.Constants;
import vulnerabilities.Vulnerability;
import vulnerabilities.rule.Rule;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class NeglectErrorHandlingVulnerability extends Vulnerability {

    private final List<Rule> validationRules;

    public NeglectErrorHandlingVulnerability() {
        validationRules = initializeRules(this);
    }

    public List<Rule> getValidationRules() {
        return validationRules;
    }

    @Override
    public List<ReportInformation> checkRules(List<String> sourceCode) {
        List<ReportInformation> result = new ArrayList<>();
        for (Rule curRule : validationRules) {
            Pattern pattern = Pattern.compile(curRule.getMask());
            Matcher matcher;
            int codeStringNumber = 0;
            for (String curCodeString : sourceCode) {
                ++codeStringNumber;
                String curStringWithoutTab = curCodeString.replace("\t", "");
                matcher = pattern.matcher(curStringWithoutTab);
                if (matcher.find()) {
                    ReportInformation reportInformation = new ReportInformation(
                            codeStringNumber + ": " + curStringWithoutTab
                            , Constants.NEGLECT_ERROR_HANDLING_VULNERABILITY
                            , curRule
                            , codeStringNumber);
                    result.add(reportInformation);
                }
            }
        }
        return null;
    }
    List<Rule> neglectErrorHandling = Arrays.asList(
            new Rule("Using an unsafe function", "strncpy\\([a-zA-Z_0-9]+);",
                    "Unsafe function call"
                    , "Chek to null point exception"),
            new Rule("Unsafe functions calling ", "Impersonate\\([a-zA-Z_0-9]+);" +
                    "DeleteFile\\([a-zA-Z_0-9]+);RevertToSelf();", "Unsafe function calling queue"
                    , "check calling functions"),
            new Rule("All errors handling", "try\\{[a-zA-Z_0-9]+}except\\([a-zA-Z_0-9]+)\\{[a-zA-Z_0-9]+}"
                    , "Unsafe error handling method"
                             , "BEtter not to use all errors handling")
    );
}
